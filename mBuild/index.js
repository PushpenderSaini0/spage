const loadComponents = require('./loadComponents.js');
const getComponentForPage = require('./getComponentForPage.js');
const compileRequiredComponents = require("./compileRequiredComponents.js");
const renderComponentInPageDom = require('./renderComponentInPageDom');
const loadPages = require('./loadPages.js');
const fse = require('fs-extra');
const path = require('path');

const copyCssBundel = (components, projectConfig) => {

    const masterCssPath = path.join(projectConfig["buildDir"], "__main.css");
    let data = "/* CSS generated by spage */";
    fse.writeFileSync(masterCssPath, data);

    for (let i = 0; i < components.length; i++) {
        if (components[i]["componentCss"]) {
            data = "\n" + fse.readFileSync(path.join(components[i]["dirPath"], components[i]["name"] + ".css"), 'utf8');
            fse.appendFileSync(masterCssPath, data);
        }
    }
}

const renderComponentInPageDomHandler = ([pageWithComponent, components, projectConfig]) => {
    renderComponentInPageDom(pageWithComponent, projectConfig);
    fse.rmSync(path.join(projectConfig["buildDir"], "__componentsLib"), { recursive: true, force: true });
    fse.copySync(projectConfig["publicDir"], projectConfig["buildDir"]);
    copyCssBundel(components, projectConfig);
}

const startBuild = (projectConfig) => {

    // Load all components
    const components = loadComponents(projectConfig);

    // Check if more tha one components were loaded
    if (components.length != 0) {

        // Clean previous build data and copy pages
        fse.emptyDirSync(projectConfig["buildDir"]);
        fse.copySync(projectConfig["pagesDir"], projectConfig["buildDir"]);

        // Load pages from buildDir
        const pages = loadPages(projectConfig);

        // TODO : check for conflicts in public folder and copy

        // Update component for page
        const pageWithComponent = getComponentForPage(pages, components);

        compileRequiredComponents(pageWithComponent, components, projectConfig).then(
            renderComponentInPageDomHandler
        );

    } else {
        console.log("No components were found / loaded");
    }

}
module.exports = startBuild;